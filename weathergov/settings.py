"""
Django settings for weathergov project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-qku8p%bk=+v_4mcsmi$b%vq&%c_jcjroglyjhouiy^_chak60m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'weather',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'weathergov.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'weather.context_processors.route_info',
            ],
            'builtins': [
                'django.templatetags.i18n',
                'weather.templatetags.weather_i18n',
                'weather.templatetags.weather_partials'
            ]
        },
    },
]

WSGI_APPLICATION = 'weathergov.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('MYSQL_DATABASE'),
        'USER': os.environ.get('MYSQL_USER'),
        'PASSWORD': os.environ.get('MYSQL_PASSWORD'),
        'HOST': 'database',
        'PORT': 3306
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"
# LANGUAGES = (
#     ("en", _(u"English")),
#     ("es", _(u"Spanish")),
#     ("zh-hans", _(u"Chinese"))
# )

TIME_ZONE = 'UTC'

USE_I18N = True
USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/assets/'
STATICFILES_DIRS = [
    BASE_DIR / "weathergov/frontend/assets",
    BASE_DIR / "weathergov/frontend"
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# i18n
LOCALE_PATHS = [
    BASE_DIR / "locale"
]

# Custom site information
SITE_LOGO = "/assets/logo.svg"
SITE_NAME = "beta.weather.gov"
SITE_SLOGAN = "National Weather Service"

# region: Logging-----------------------------------------------------------###

# A Python logging configuration consists of four parts:
#   Loggers
#   Handlers
#   Filters
#   Formatters
# https://docs.djangoproject.com/en/4.1/topics/logging/

# Log a message by doing this:
#
#   import logging
#   logger = logging.getLogger(__name__)
#
# Then:
#
#   logger.debug("We're about to execute function xyz. Wish us luck!")
#   logger.info("Oh! Here's something you might want to know.")
#   logger.warning("Something kinda bad happened.")
#   logger.error("Can't do this important task. Something is very wrong.")
#   logger.critical("Going to crash now.")


LOGGING = {
    "version": 1,
    # Don't import Django's existing loggers
    "disable_existing_loggers": True,
    # define how to convert log messages into text;
    # each handler has its choice of format
    "formatters": {
        "verbose": {
            "format": "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
        "simple": {
            "format": "%(levelname)s %(message)s",
        },
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "[{server_time}] {message}",
            "style": "{",
        },
    },
    # define where log messages will be sent
    # each logger can have one or more handlers
    "handlers": {
        "console": {
            "level": os.environ.get('DJANGO_LOG_LEVEL', "DEBUG"),
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        },
        # No file logger is configured,
        # because containerized apps
        # do not log to the file system.
    },
    # define loggers: these are "sinks" into which
    # messages are sent for processing
    "loggers": {
        # Django's generic logger
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        # Django's template processor
        "django.template": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        # Django's runserver
        "django.server": {
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        },
        # Django's runserver requests
        "django.request": {
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        },
        # Our app!
        "weather": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
    # root logger catches anything, unless
    # defined by a more specific logger
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}

# endregion
